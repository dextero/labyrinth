package pl.labyrinth;

import com.bulletphysics.collision.broadphase.BroadphaseInterface;
import com.bulletphysics.collision.broadphase.DbvtBroadphase;
import com.bulletphysics.collision.dispatch.CollisionDispatcher;
import com.bulletphysics.collision.dispatch.DefaultCollisionConfiguration;
import com.bulletphysics.collision.shapes.BoxShape;
import com.bulletphysics.collision.shapes.CollisionShape;
import com.bulletphysics.collision.shapes.SphereShape;
import com.bulletphysics.dynamics.DiscreteDynamicsWorld;
import com.bulletphysics.dynamics.constraintsolver.SequentialImpulseConstraintSolver;

import javax.media.opengl.GL3;
import javax.vecmath.Vector3f;
import java.awt.*;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

/**
 * Created with IntelliJ IDEA.
 * User: dex
 * Date: 12/28/12
 * Time: 7:11 PM
 */
public class Labyrinth {
    GL3 gl;

    class Physics {
        public CollisionShape ballShape;
        public CollisionShape groundShape;
        public CollisionShape borderShapeW;
        public CollisionShape borderShapeH;
        public CollisionShape wallShape;

        BroadphaseInterface broadphase;
        DefaultCollisionConfiguration collisionConfiguration;
        CollisionDispatcher dispatcher;
        SequentialImpulseConstraintSolver solver;
        DiscreteDynamicsWorld dynamicsWorld;

        public Physics(float wallThickness, float width, float height) {
            broadphase = new DbvtBroadphase();
            collisionConfiguration = new DefaultCollisionConfiguration();
            dispatcher = new CollisionDispatcher(collisionConfiguration);
            solver = new SequentialImpulseConstraintSolver();
            dynamicsWorld = new DiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);

            ballShape = new SphereShape(0.5f * wallThickness);
            groundShape = new BoxShape(new Vector3f(width, height, wallThickness));
            borderShapeW = new BoxShape(new Vector3f(wallThickness, height, wallThickness));
        }
    }

    class Rendering {
        public Drawable ball;
        public Drawable[] walls;
    }

    Physics physics;
    Rendering rendering;

    public Labyrinth(GL3 gl, String filename) {
        this.gl = gl;
        loadFromFile(filename);
    }

    public void loadFromFile(String filename) {
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader(filename));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        int width = 0;
        int height = 0;
        char[][] map = new char[0][];
        int boxes = 0; // 4 sciany + podloga
        Point start = null;
        Point end = null;

        try {
            Scanner scanner = new Scanner(reader.readLine());
            width = scanner.nextInt();
            height = scanner.nextInt();

            map = new char[width][height];
            boxes = 5;

            for (int i = 0; i < height; ++i) {
                String line = reader.readLine();

                for (int j = 0; j < width; ++j) {
                    map[j][i] = line.charAt(j);
                    System.out.println(map[j][i]);
                    switch (map[j][i]) {
                        case '#':
                            ++boxes;
                            break;
                        case '^':
                            if (start != null)
                                throw new RuntimeException("multiple start positions found");
                            start = new Point(j, i);
                            break;
                        case '$':
                            if (end != null)
                                throw new RuntimeException("multiple end positions found");
                            end = new Point(j, i);
                            break;
                        default:
                            System.out.println(map[j][i]);
                            break;
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (start == null || end == null)
            throw new RuntimeException("no start and/or end position found");

        rendering = new Rendering();

        rendering.walls = new Drawable[boxes + 2];
        rendering.walls[0] = Drawable.createCube(gl, new float[]{ 0.f, 0.f, 1.f });
        for (int i = 1; i < boxes; ++i)
            rendering.walls[i] = Drawable.createCube(gl, new float[] { 1.f, 1.f, 1.f });

        rendering.walls[boxes] = Drawable.createCube(gl, new float[] { 1.f, 0.f, 0.f });
        rendering.walls[boxes + 1] = Drawable.createCube(gl, new float[] { 0.f, 1.f, 0.f });

        float unitSize = 10.f;
        float halfUnitSize = unitSize * 0.5f;
        float fullWidth = (float)width * unitSize;
        float fullHeight = (float)height * unitSize;
        float halfWidth = (fullWidth + unitSize) * 0.5f;
        float halfHeight = (fullHeight + unitSize) * 0.5f;
        float borderWidth = fullWidth + 2.f * unitSize;
        float borderHeight = fullHeight + 2.f * unitSize;

        // podloga
        rendering.walls[0].setPosition(0.f, 0.f, -unitSize);
        rendering.walls[0].setScale(borderWidth * 0.5f, borderHeight * 0.5f, halfUnitSize);

        // sciany boczne
        rendering.walls[1].setPosition(-halfWidth, 0.f, 0.f);
        rendering.walls[1].setScale(halfUnitSize, borderHeight * 0.5f, halfUnitSize);

        rendering.walls[2].setPosition(halfWidth, 0.f, 0.f);
        rendering.walls[2].setScale(halfUnitSize, borderHeight * 0.5f, halfUnitSize);

        rendering.walls[3].setPosition(0.f, -halfHeight, 0.f);
        rendering.walls[3].setScale(borderWidth * 0.5f, halfUnitSize, halfUnitSize);

        rendering.walls[4].setPosition(0.f, halfHeight, 0.f);
        rendering.walls[4].setScale(borderWidth * 0.5f, halfUnitSize, halfUnitSize);

        // sciany wewnatrz
        int current = 5;
        float baseX = -halfWidth + unitSize;
        float baseY = -halfHeight + unitSize;

        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                if (map[x][y] == '#') {
                    rendering.walls[current].setPosition(baseX + (float)x * unitSize, baseY + (float)y * unitSize, 0.f);
                    rendering.walls[current].setScale(halfUnitSize, halfUnitSize, halfUnitSize);
                    ++current;
                } else if (map[x][y] == '^' || map[x][y] == '$') {
                    int index = rendering.walls.length - 1;
                    if (map[x][y] == '^')
                        --index;

                    rendering.walls[index].setPosition(baseX + (float)x * unitSize, baseY + (float)y * unitSize, -unitSize + 0.05f);
                    rendering.walls[index].setScale(halfUnitSize, halfUnitSize, halfUnitSize);
                }
            }
        }

        physics = new Physics();

        physics.walls = new BoxShape[boxes];
        for (int i = 0; i < boxes; ++i) {
            BoxShape box = new BoxShape(halfUnitSize);
            com.bulletphysics.dynamics.
            physics.walls[i] = box;
        }
    }

    public void draw() {
        for (Drawable d: rendering.walls) {
            d.setupAttributes();
            d.draw();
        }
    }
}
